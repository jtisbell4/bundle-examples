name: "Draft new release"

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        options:
        - MAJOR
        - MINOR
        description: 'Type of version you want to Release'
        required: true

permissions:
  contents: write  # Grant write access to contents
  pull-requests: write  # Grant write access to pull requests        

jobs:
  test:
    name: "Run Tests"
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: Run tests
        if: success()
        env:
          DATABRICKS_HOST: ${{ vars.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
        run: |
          python run_tests_on_remote.py
          
  deploy-databricks:
    name: "Deploy Databricks Assets to Staging"
    needs: test
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Install Databricks CLI
        if: success()
        uses: databricks/setup-cli@main

      - name: Deploy the bundle
        if: success()
        run: |
          databricks bundle validate -t staging
          databricks bundle deploy -t staging
        env:
          DATABRICKS_HOST: ${{ vars.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
  
  
  draft-new-release:
    name: "Draft a new release"
    needs: deploy-databricks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Get latest release
        id: latest_release
        run: |
          RESPONSE=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          echo "Response: $RESPONSE"
          LATEST_RELEASE=$(echo "$RESPONSE" | jq -r .tag_name)
          echo "version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Increment Release version
        id: increment_version
        run: |
          RELEASE_TYPE=${{ github.event.inputs.release_type }}
          VERSION=${{ steps.latest_release.outputs.version }}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          if [[ (-z "$VERSION" || "$VERSION" == "null") && "$RELEASE_TYPE" = "MAJOR" ]]; then
            NEW_VERSION="1.0.0"
          elif [[ (-z "$VERSION" || "$VERSION" == "null") && "$RELEASE_TYPE" = "MINOR" ]]; then
            NEW_VERSION="0.1.0"
          elif [[ -n "$VERSION" && "$RELEASE_TYPE" = "MAJOR" ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR="0"
            NEW_PATCH="0"
            NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          elif [[ -n "$VERSION" && "$RELEASE_TYPE" = "MINOR" ]]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH="0"
            NEW_VERSION="$MAJOR.$NEW_MINOR.$NEW_PATCH"
          fi
          echo "The new Release version is $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create release branch
        run: git checkout -b release/${{ steps.increment_version.outputs.new_version }}

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      - name: Push new branch
        run: git push origin release/${{ steps.increment_version.outputs.new_version }}

      - uses: actions/checkout@v4
        with:
          ref: release/${{ steps.increment_version.outputs.new_version }}
          fetch-depth: 0

      - name: Create pull request
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: release/${{ steps.increment_version.outputs.new_version }}
          base: main
          title: Release version ${{ steps.increment_version.outputs.new_version }}
          reviewers: ${{ github.actor }} 
          body: |
            Hi @${{ github.actor }}!

            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.
            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.